#install.packages("tidyverse")
#install.packages("PerformanceAnalytics")
#install.packages("ggfortify")
#install.packages("fastDummies")
library(tidyverse) # core package includes following packages: tidyr, dplyr, ggplot2, readr, purrr, tibble, stringr, forcats
library(plotly)
library("PerformanceAnalytics") #for correlation
library(broom) # for model quantification
library(ggfortify) # for visualizing model fits
library(fastDummies)
library(dplyr)
library(ggplot2)
diabetes <- read.csv2("diabetes.csv", sep = ",")
ggplot(diabetes, aes(x=Age))+
geom_bar()
diabetes %>%
plot_ly(x = ~Age) %>%
add_histogram(color = I("navy"), opacity = 0.9)
#install.packages("tidyverse")
#install.packages("PerformanceAnalytics")
#install.packages("ggfortify")
#install.packages("fastDummies")
library(tidyverse) # core package includes following packages: tidyr, dplyr, ggplot2, readr, purrr, tibble, stringr, forcats
library(plotly)
library("PerformanceAnalytics") #for correlation
library(broom) # for model quantification
library(ggfortify) # for visualizing model fits
library(fastDummies)
library(dplyr)
library(ggplot2)
bike <- read.csv2("SeoulBikeData.csv", sep = ",")
ggplot(birthrate, aes(x=Age))+
geom_bar()
ggplot(bike, aes(x=Seasons))+
geom_bar()
bike %>%
plot_ly(x = ~Seasons) %>%
add_histogram(color = I("navy"), opacity = 0.9)
bike %>%
plot_ly(x = ~Seasons) %>%
add_histogram(color = I("navy"), opacity = 0.9)+
ggtitle("Bikes in Seoul by seasons")
bike %>%
plot_ly(x = ~Seasons) %>%
add_histogram(color = I("navy"), opacity = 0.9) %>%
ggtitle("Bikes in Seoul by seasons")
# Grafik 3
bike %>%
plot_ly(x = ~Seasons) %>%
add_histogram(color = I("navy"), opacity = 0.9) %>%
layout(title = "Total bike count by seasons")
bike_data <- read_csv("bike.csv",
show_col_types = FALSE,
col_types = cols(Date = col_date(format = "%d/%m/%Y"),
Seasons = col_factor(levels = c("Winter", "Spring", "Summer", "Autumn"),
ordered = TRUE),
Holiday = col_factor(),
"Functioning Day" = col_factor()
))
setwd("~/GitHub/Storytelling mit Daten")
setwd("~/GitHub/Interactive Visualisations")
bike_data <- read_csv("SeoulBikeData.csv",
show_col_types = FALSE,
col_types = cols(Date = col_date(format = "%d/%m/%Y"),
Seasons = col_factor(levels = c("Winter", "Spring", "Summer", "Autumn"),
ordered = TRUE),
Holiday = col_factor(),
"Functioning Day" = col_factor()
))
bike_data <- bike_data %>%
mutate(day = weekdays(Date),
month = months(Date),
day_time = case_when(
Hour >= 5 & Hour < 11 ~ "Morning",
Hour >= 11 & Hour < 15 ~ "Noon",
Hour >= 15 & Hour < 18 ~ "Afternoon",
Hour >= 18 & Hour < 22 ~ "Evening",
Hour < 5 | Hour >= 22 ~ "Night")) %>%
select(Date,month,day,Hour,day_time, Holiday, 'Rented Bike Count',everything())
bike_data$day_time <- factor(bike_data$day_time,
levels = c("Morning", "Noon", "Afternoon", "Evening", "Night"),ordered = TRUE)
bike_data$day <- factor(bike_data$day,
levels = c("Montag", "Dienstag", "Mittwoch", "Donnerstag", "Freitag", "Samstag", "Sonntag" ))
bike_data$month <- factor(bike_data$month,
levels = c("Januar", "Februar", "März", "April", "Mai", "Juni", "Juli", "August", "September", "Oktober","November", "Dezember"))
### Creating a piechart
piechartdata <- bike_data %>%
arrange(desc(day_time)) %>%
mutate(prop = `Rented Bike Count` / sum(bike_data$`Rented Bike Count`) *100) %>%
mutate(ypos = cumsum(prop)- 0.5*prop )
ggplot(piechartdata, aes(x = "", y = `Rented Bike Count`, fill = day_time))+
geom_bar(stat="identity", width=1) +
coord_polar("y", start=0)+
theme_void()+
ggtitle("The most popular daytime for renting a bike in Seoul")+
guides(fill = guide_legend(title = "Rented Bikes in Percent"))
### Boxplot showing the most popular daytimes for renting a bike in Seoul
ggplot(bike_data, aes(x = as.factor(Hour), y = `Rented Bike Count`))+
geom_boxplot()+
ggtitle("Distribution of bike rentals on daytimesin Seoul")+
xlab("Time")+
ylab("Bike rentals")+
theme_minimal()
### Line chart
ggplot(bike_data, aes(x = Hour, y = bike_data$'Rented Bike Count', group = day_time)) +
geom_line() +
geom_path()+
geom_point()+
#facet_wrap(~Seasons) +
#stat_smooth(method = lm, color = "red") +
ggtitle("Popular daytimes for renting a bike in Seoul") +
xlab("Hour") +
ylab("Rented Bikes")
### Point chart showing all the daytimes
ggplot(bike_data, aes(x= Hour, y = bike_data$'Rented Bike Count')) +
geom_point() +
#facet_wrap(~Seasons) +
#stat_smooth(method = lm, color = "red") +
ggtitle("Popular daytimes for renting a bike in Seoul") +
xlab("Hour") +
ylab("Rented Bikes")+
theme_minimal()
ggplot(bike_data, aes(x = Hour, y = bike_data$'Rented Bike Count', group = Seasons)) +
geom_line() +
geom_path()+
geom_point()+
#facet_wrap(~Seasons) +
#stat_smooth(method = lm, color = "red") +
ggtitle("Popular daytimes for renting a bike in Seoul") +
xlab("Hour") +
ylab("Rented Bikes")
ggplot(bike_data, aes(x = Hour, y = bike_data$'Rented Bike Count', group = Seasons)) +
geom_line() +
geom_path()+
#facet_wrap(~Seasons) +
#stat_smooth(method = lm, color = "red") +
ggtitle("Popular daytimes for renting a bike in Seoul") +
xlab("Hour") +
ylab("Rented Bikes")
ggplot(bike_data, aes(x = Hour, y = Rented.Bike.Count, group = Seasons)) +
geom_line() +
geom_path()+
#facet_wrap(~Seasons) +
#stat_smooth(method = lm, color = "red") +
ggtitle("Popular daytimes for renting a bike in Seoul") +
xlab("Hour") +
ylab("Rented Bikes")
ggplot(bike_data, aes(x = Hour, y = Rented Bike Count, group = Seasons)) +
ggplot(bike_data, aes(x = Hour, y = 'Rented Bike Count', group = Seasons)) +
geom_line() +
geom_path()+
#facet_wrap(~Seasons) +
#stat_smooth(method = lm, color = "red") +
ggtitle("Popular daytimes for renting a bike in Seoul") +
xlab("Hour") +
ylab("Rented Bikes")
ggplot(bike_data, aes(x = Hour, y = bike_data$'Rented Bike Count', group = day_time)) +
geom_line() +
geom_path()+
geom_point()+
#facet_wrap(~Seasons) +
#stat_smooth(method = lm, color = "red") +
ggtitle("Popular daytimes for renting a bike in Seoul") +
xlab("Hour") +
ylab("Rented Bikes")
grafik_4 <- plot_ly() %>%
add_trace(bike, x = ~Hour, y = ~bike_data$'Rented Bike Count', type = 'scatter', mode = 'lines+markers', name = 'Name of Trace 1') %>%
layout(title = 'Plot Title')
grafik_4 <- plot_ly() %>%
add_trace(bike, x = ~Hour, y = ~bike_data$'Rented Bike Count', type = 'scatter', mode = 'lines+markers', name = 'Name of Trace 1') %>%
layout(title = 'Plot Title')
grafik_4
grafik_4 <- plot_ly() %>%
add_trace(bike, x = ~'Hour', y = ~bike_data$'Rented Bike Count', type = 'scatter', mode = 'lines+markers', name = 'Name of Trace 1') %>%
layout(title = 'Plot Title')
grafik_4
### Point chart with trendline
ggplot(bike_data, aes(x= Hour, y = bike_data$'Rented Bike Count')) +
geom_point() +
facet_wrap(~Seasons) +
stat_smooth(method = lm, color = "yellow") +
ggtitle("Popular daytimes for renting a bike by seasons") +
xlab("Hour") +
ylab("Rented Bikes")+
theme_minimal()
line_df <- bike %>%
group_by(Hour)
View(line_df)
scatter <- ggplot(bike_data,aes(x= Snowfall, y = `Rented Bike Count`))+
geom_jitter(shape=8, (aes(color = Temperature)))+
scale_color_gradient(low="dark blue", high= "light blue")+
facet_wrap(~month)+
ggtitle("Bike rental and the impact of snow")+
theme_minimal()
ggplotly(scatter)
bike_data <- read_csv("SeoulBikeData.csv",
show_col_types = FALSE,
col_types = cols(Date = col_date(format = "%d/%m/%Y"),
Seasons = col_factor(levels = c("Winter", "Spring", "Summer", "Autumn"),
ordered = TRUE),
Holiday = col_factor(),
"Functioning Day" = col_factor()
))
bike_data <- bike_data %>%
mutate(day = weekdays(Date),
month = months(Date),
day_time = case_when(
Hour >= 5 & Hour < 11 ~ "Morning",
Hour >= 11 & Hour < 15 ~ "Noon",
Hour >= 15 & Hour < 18 ~ "Afternoon",
Hour >= 18 & Hour < 22 ~ "Evening",
Hour < 5 | Hour >= 22 ~ "Night")) %>%
select(Date,month,day,Hour,day_time, Holiday, 'Rented Bike Count',everything())
bike_data$day_time <- factor(bike_data$day_time,
levels = c("Morning", "Noon", "Afternoon", "Evening", "Night"),ordered = TRUE)
bike_data$day <- factor(bike_data$day,
levels = c("Montag", "Dienstag", "Mittwoch", "Donnerstag", "Freitag", "Samstag", "Sonntag" ))
bike_data$month <- factor(bike_data$month,
levels = c("Januar", "Februar", "März", "April", "Mai", "Juni", "Juli", "August", "September", "Oktober","November", "Dezember"))
# Grafik 3
bike %>%
plot_ly(x = ~Seasons) %>%
add_histogram(color = I("navy"), opacity = 0.9) %>%
layout(title = "Total bike count by seasons")
ggplot(bike_data, aes(x = Hour, y = bike_data$'Rented Bike Count', group = day_time)) +
geom_line() +
geom_path()+
geom_point()+
#facet_wrap(~Seasons) +
#stat_smooth(method = lm, color = "red") +
ggtitle("Popular daytimes for renting a bike in Seoul") +
xlab("Hour") +
ylab("Rented Bikes")
ggplot(bike_data, aes(x = Hour, y = bike_data$'Rented Bike Count', group = Seasons)) +
geom_line() +
geom_path()+
geom_point()+
#facet_wrap(~Seasons) +
#stat_smooth(method = lm, color = "red") +
ggtitle("Popular daytimes for renting a bike in Seoul") +
xlab("Hour") +
ylab("Rented Bikes")
### Bar chart for popular daytime
ggplot(bike_data, aes(x= Hour, y = `Rented Bike Count`)) +
geom_col() +
#facet_wrap(~Seasons) +
ggtitle("Popular daytimes for renting a bike in Seoul") +
xlab("Hour") +
ylab("Rented Bikes")+
theme_minimal()+
scale_y_continuous(labels = comma)
### Correlation between temperature and bike rental
ggplot(bike_data, aes(`Temperature` ,`Rented Bike Count`))+
geom_jitter()+
scale_fill_grey(start = 0.2, end = 0.8,na.value = "red")+
stat_smooth(method = lm, se = FALSE, color = "green")+
labs(
x = "Temperature in Celsius",
y = "Rented Bikes",
title = "Correlation between temperature and rented bikes")+
theme_minimal()
grafik_5 <- plot_ly(data = bike, x = ~'Temperature', y = ~'Rented Bike Count', color = ~'Seasons', colors = pal)
grafik_5 <- plot_ly(data = bike, x = ~'Temperature', y = ~'Rented Bike Count', color = ~'Seasons')
grafik_5 <- plot_ly(data = bike, x = ~'Temperature', y = ~'Rented Bike Count', color = ~'Seasons')
grafik_5
grafik_5 <- plot_ly(data = bike, x = ~'Temperature', y = ~'Rented Bike Count', color = ~'Seasons', type = 'scatter')
grafik_5
ggplot(bike_data, aes(`Temperature` ,`Rented Bike Count`))+
geom_jitter()+
scale_fill_grey(start = 0.2, end = 0.8,na.value = "red")+
stat_smooth(method = lm, se = FALSE, color = "green")+
labs(
x = "Temperature in Celsius",
y = "Rented Bikes",
title = "Correlation between temperature and rented bikes")+
theme_minimal()
ggplot(bike_data, aes(`Temperature` ,`Rented Bike Count`, color = `Seasons`))+
geom_jitter()+
scale_fill_grey(start = 0.2, end = 0.8,na.value = "red")+
stat_smooth(method = lm, se = FALSE, color = "green")+
labs(
x = "Temperature in Celsius",
y = "Rented Bikes",
title = "Correlation between temperature and rented bikes")+
theme_minimal()
grafik_5 <- ggplot(bike_data, aes(`Temperature` ,`Rented Bike Count`, color = `Seasons`))+
geom_jitter()+
scale_fill_grey(start = 0.2, end = 0.8,na.value = "red")+
stat_smooth(method = lm, se = FALSE, color = "green")+
labs(
x = "Temperature in Celsius",
y = "Rented Bikes",
title = "Correlation between temperature and rented bikes")+
theme_minimal()
ggplotly(grafik_5)
grafik_4 <- ggplot(bike_data, aes(`Temperature` ,`Rented Bike Count`, color = `Seasons`))+
geom_jitter()+
scale_fill_grey(start = 0.2, end = 0.8,na.value = "red")+
stat_smooth(method = lm, se = FALSE, color = "green")+
labs(
x = "Temperature in Celsius",
y = "Rented Bikes",
title = "Correlation between temperature and rented bikes")+
theme_minimal()
ggplotly(grafik_4)
