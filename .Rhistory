day_time = case_when(
Hour >= 5 & Hour < 11 ~ "Morning",
Hour >= 11 & Hour < 15 ~ "Noon",
Hour >= 15 & Hour < 18 ~ "Afternoon",
Hour >= 18 & Hour < 22 ~ "Evening",
Hour < 5 | Hour >= 22 ~ "Night")) %>%
select(Date,month,day,Hour,day_time, Holiday, 'Rented Bike Count',everything())
bike_data$day_time <- factor(bike_data$day_time,
levels = c("Morning", "Noon", "Afternoon", "Evening", "Night"),ordered = TRUE)
bike_data$day <- factor(bike_data$day,
levels = c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday" ))
bike_data$month <- factor(bike_data$month,
levels = c("January", "February", "March", "April", "May", "June", "July", "August", "September", "October","November", "December"))
#install.packages("tidyverse")
#install.packages("PerformanceAnalytics")
#install.packages("ggfortify")
#install.packages("fastDummies")
library(tidyverse) # core package includes following packages: tidyr, dplyr, ggplot2, readr, purrr, tibble, stringr, forcats
library(plotly)
library("PerformanceAnalytics") #for correlation
library(broom) # for model quantification
library(ggfortify) # for visualizing model fits
library(fastDummies)
library(dplyr)
library(ggplot2)
library(tidyverse)
library(dplyr)
library(tidyr)
library(ggplot2)
library(magrittr)
#install.packages("PerformanceAnalytics")
library("PerformanceAnalytics")
#install.packages("scales")
#library(scales)
bike_data <- read_csv("SeoulBikeData.csv",
show_col_types = FALSE,
col_types = cols(Date = col_date(format = "%d/%m/%Y"),
Seasons = col_factor(levels = c("Winter", "Spring", "Summer", "Autumn"),
ordered = TRUE),
Holiday = col_factor(),
"Functioning Day" = col_factor()
))
bike_data <- read_csv("SeoulBikeData.csv",
show_col_types = FALSE,
col_types = cols(Date = col_date(format = "%d/%m/%Y"),
Seasons = col_factor(levels = c("Winter", "Spring", "Summer", "Autumn"),
ordered = TRUE),
Holiday = col_factor(),
"Functioning Day" = col_factor()
))
bike_data <- bike_data %>%
mutate(day = weekdays(Date),
month = months(Date),
day_time = case_when(
Hour >= 5 & Hour < 11 ~ "Morning",
Hour >= 11 & Hour < 15 ~ "Noon",
Hour >= 15 & Hour < 18 ~ "Afternoon",
Hour >= 18 & Hour < 22 ~ "Evening",
Hour < 5 | Hour >= 22 ~ "Night")) %>%
select(Date,month,day,Hour,day_time, Holiday, 'Rented Bike Count',everything())
bike_data$day_time <- factor(bike_data$day_time,
levels = c("Morning", "Noon", "Afternoon", "Evening", "Night"),ordered = TRUE)
bike_data$day <- factor(bike_data$day,
levels = c("Montag", "Dienstag", "Mittwoch", "Donnerstag", "Freitag", "Samstag", "Sonntag" ))
bike_data$month <- factor(bike_data$month,
levels = c("Januar", "Februar", "März", "April", "Mai", "Juni", "Juli", "August", "September", "Oktober","November", "Dezember"))
View(bike_data)
bike_data$day_time <- factor(bike_data$day_time,
levels = c("Morning", "Noon", "Afternoon", "Evening", "Night"),ordered = TRUE)
bike_data$day <- factor(bike_data$day,
levels = c("Montag", "Dienstag", "Mittwoch", "Donnerstag", "Freitag", "Samstag", "Sonntag" ))
bike_data$month <- factor(bike_data$month,
levels = c("Januar", "Februar", "März", "April", "Mai", "Juni", "Juli", "August", "September", "Oktober","November", "December"))
bike_data$day_time <- factor(bike_data$day_time,
levels = c("Morning", "Noon", "Afternoon", "Evening", "Night"),ordered = TRUE)
bike_data$day <- factor(bike_data$day,
levels = c("Montag", "Dienstag", "Mittwoch", "Donnerstag", "Freitag", "Samstag", "Sonntag" ))
bike_data$month <- factor(bike_data$month,
levels = c("Januar", "Februar", "März", "April", "Mai", "Juni", "Juli", "August", "September", "Oktober","November", "Dezember"))
#install.packages("tidyverse")
#install.packages("PerformanceAnalytics")
#install.packages("ggfortify")
#install.packages("fastDummies")
library(tidyverse) # core package includes following packages: tidyr, dplyr, ggplot2, readr, purrr, tibble, stringr, forcats
library(plotly)
library("PerformanceAnalytics") #for correlation
library(broom) # for model quantification
library(ggfortify) # for visualizing model fits
library(fastDummies)
library(dplyr)
library(ggplot2)
library(tidyverse)
library(dplyr)
library(tidyr)
library(ggplot2)
library(magrittr)
#install.packages("PerformanceAnalytics")
library("PerformanceAnalytics")
#install.packages("scales")
#library(scales)
bike_data <- read_csv("SeoulBikeData.csv",
show_col_types = FALSE,
col_types = cols(Date = col_date(format = "%d/%m/%Y"),
Seasons = col_factor(levels = c("Winter", "Spring", "Summer", "Autumn"),
ordered = TRUE),
Holiday = col_factor(),
"Functioning Day" = col_factor()
))
bike_data <- bike_data %>%
mutate(day = weekdays(Date),
month = months(Date),
day_time = case_when(
Hour >= 5 & Hour < 11 ~ "Morning",
Hour >= 11 & Hour < 15 ~ "Noon",
Hour >= 15 & Hour < 18 ~ "Afternoon",
Hour >= 18 & Hour < 22 ~ "Evening",
Hour < 5 | Hour >= 22 ~ "Night")) %>%
select(Date,month,day,Hour,day_time, Holiday, 'Rented Bike Count',everything())
bike_data$day_time <- factor(bike_data$day_time,
levels = c("Morning", "Noon", "Afternoon", "Evening", "Night"),ordered = TRUE)
bike_data$day <- factor(bike_data$day,
levels = c("Montag", "Dienstag", "Mittwoch", "Donnerstag", "Freitag", "Samstag", "Sonntag" ))
bike_data$month <- factor(bike_data$month,
levels = c("Januar", "Februar", "März", "April", "Mai", "Juni", "Juli", "August", "September", "Oktober","November", "Dezember"))
grafik_5 <- ggplot(bike_data,aes(x= Snowfall, y = `Rented Bike Count`))+
geom_jitter(shape=8, (aes(color = Temperature)))+
scale_color_gradient(low="dark blue", high= "light blue")+
facet_wrap(~month)+
ggtitle("Anzahl ausgeliehene Fahrräder und der Einfluss von Schnee")+
theme_minimal()
ggplotly(grafik_5)
grafik_5 <- ggplot(bike_data,aes(x= Snowfall, y = `Rented Bike Count`))+
geom_jitter(shape=8, (aes(color = Temperature)))+
scale_color_gradient(low="dark blue", high= "light blue")+
facet_wrap(~month)+
ggtitle("Anzahl ausgeliehene Fahrräder und der Einfluss von Schnee")+
theme_minimal()
grafik_5
grafik_5 <- ggplot(bike_data,aes(x= Snowfall, y = `Rented Bike Count`))+
geom_jitter(shape=8, (aes(color = Temperature)))+
scale_color_gradient(low="dark blue", high= "light blue")+
facet_wrap(~month)+
xlab("Schnee in Zentimetern") +
ylab("Ausgeliehene Fahrräder")+
ggtitle("Anzahl ausgeliehene Fahrräder und der Einfluss von Schnee")+
theme_minimal()
grafik_5
grafik_6 <- ggplot(bike_data, aes(Hour, `Rented Bike Count`))+
geom_point(aes(color = day), alpha = 0.5) +
geom_smooth(aes(color = day, fill = day), method = "lm")+
xlab("Uhrzeit") +
ylab("Anzahl ausgeliehener Fahrräder")+
theme_minimal()
grafik_6
# Schritt 1: Übersichtliche Grafik machen mit Stunde und ausgeliehenen Fahrrädern nach Wochentag aufgeteilt.
bike_data %>%
ggplot(aes(Hour, `Rented Bike Count`, color = day)) +
geom_smooth(se = F, size = 1) +
xlab("Uhrzeit") +
ylab("Anzahl ausgeliehener Fahrräder")+
scale_color_discrete("")+
theme_minimal()
ggplotly(grafik_7, dynamicTicks = TRUE) %>%
rangeslider() %>%
layout(hovermode = "x")
# Schritt 1: Übersichtliche Grafik machen mit Stunde und ausgeliehenen Fahrrädern nach Wochentag aufgeteilt.
library(RColorBrewer)
display.brewer.all(colorblindFriendly = TRUE)
bike_data %>%
ggplot(aes(Hour, `Rented Bike Count`, color = day)) +
geom_smooth(se = F, size = 1) +
xlab("Uhrzeit") +
ylab("Anzahl ausgeliehener Fahrräder")+
scale_color_discrete("")+
theme_minimal()
# Schritt 1: Übersichtliche Grafik machen mit Stunde und ausgeliehenen Fahrrädern nach Wochentag aufgeteilt.
library(RColorBrewer)
display.brewer.all(colorblindFriendly = TRUE)
bike_data %>%
ggplot(aes(Hour, `Rented Bike Count`, color = day)) +
geom_smooth(se = F, size = 1) +
xlab("Uhrzeit") +
ylab("Anzahl ausgeliehener Fahrräder")+
scale_color_discrete("")+
scale_color_brewer(palette = "Dark2")
theme_minimal()
# Schritt 1: Übersichtliche Grafik machen mit Stunde und ausgeliehenen Fahrrädern nach Wochentag aufgeteilt.
library(RColorBrewer)
display.brewer.all(colorblindFriendly = TRUE)
bike_data %>%
ggplot(aes(Hour, `Rented Bike Count`, color = day)) +
geom_smooth(se = F, size = 1) +
xlab("Uhrzeit") +
ylab("Anzahl ausgeliehener Fahrräder")+
scale_color_discrete("")+
scale_color_brewer(palette = "Dark2")+
theme_minimal()
# Schritt 1: Übersichtliche Grafik machen mit Stunde und ausgeliehenen Fahrrädern nach Wochentag aufgeteilt.
library(RColorBrewer)
display.brewer.all(colorblindFriendly = TRUE)
bike_data %>%
ggplot(aes(Hour, `Rented Bike Count`, color = day)) +
geom_smooth(se = F, size = 1) +
xlab("Uhrzeit") +
ylab("Anzahl ausgeliehener Fahrräder")+
scale_color_discrete("")+
scale_color_brewer(palette = "Paired")+
theme_minimal()
ggplotly(grafik_7, dynamicTicks = TRUE) %>%
rangeslider() %>%
layout(hovermode = "x")
# Schritt 1: Übersichtliche Grafik machen mit Stunde und ausgeliehenen Fahrrädern nach Wochentag aufgeteilt.
library(RColorBrewer)
display.brewer.all(colorblindFriendly = TRUE)
bike_data %>%
ggplot(aes(Hour, `Rented Bike Count`, color = day)) +
geom_smooth(se = F, size = 2) +
xlab("Uhrzeit") +
ylab("Anzahl ausgeliehener Fahrräder")+
scale_color_discrete("")+
scale_color_brewer(palette = "Paired")+
theme_minimal()
ggplotly(grafik_7, dynamicTicks = TRUE) %>%
rangeslider() %>%
layout(hovermode = "x")
#Schritt 2: Den Slider hinzufügen
ggplotly(grafik_7, dynamicTicks = TRUE) %>%
rangeslider() %>%
layout(hovermode = "x")
# Schritt 1: Übersichtliche Grafik machen mit Stunde und ausgeliehenen Fahrrädern nach Wochentag aufgeteilt.
library(RColorBrewer)
display.brewer.all(colorblindFriendly = TRUE)
grafik_8 <- bike_data %>%
ggplot(aes(Hour, `Rented Bike Count`, color = day)) +
geom_smooth(se = F, size = 2) +
xlab("Uhrzeit") +
ylab("Anzahl ausgeliehener Fahrräder")+
scale_color_discrete("")+
scale_color_brewer(palette = "Paired")+
theme_minimal()
# Schritt 1: Übersichtliche Grafik machen mit Stunde und ausgeliehenen Fahrrädern nach Wochentag aufgeteilt.
library(RColorBrewer)
display.brewer.all(colorblindFriendly = TRUE)
grafik_8 <- bike_data %>%
ggplot(aes(Hour, `Rented Bike Count`, color = day)) +
geom_smooth(se = F, size = 2) +
xlab("Uhrzeit") +
ylab("Anzahl ausgeliehener Fahrräder")+
scale_color_discrete("")+
scale_color_brewer(palette = "Paired")+
theme_minimal()
grafik_8
#Schritt 2: Den Slider hinzufügen
ggplotly(grafik_8, dynamicTicks = TRUE) %>%
rangeslider() %>%
layout(hovermode = "x")
#Schritt 2: Den Slider hinzufügen
ggplotly(grafik_8, dynamicTicks = TRUE) %>%
rangeslider() %>%
layout(hovermode = "x", title = "Title")
#Schritt 2: Den Slider hinzufügen
ggplotly(grafik_8, dynamicTicks = TRUE) %>%
rangeslider() %>%
layout(hovermode = "x", title = "Der Trend von Fahrradausleihen zu verschiedenen Zeiten und an Wochentagen", subtitle = "sasdf")
#Schritt 2: Den Slider hinzufügen
ggplotly(grafik_8, dynamicTicks = TRUE) %>%
rangeslider() %>%
layout(hovermode = "x", title = "Der Trend von Fahrradausleihen zu verschiedenen Zeiten und an Wochentagen", sub = "sasdf")
View(bike_data)
# Einfacher Linienplot zum Regen in Seoul
ggplot(bike_data) +
geom_line(aes(x=Date,y=Snowfall),color="light green")+
labs(title="Täglich gemessener Schneefall über ein Jahr")+
xlab(label = "Datum")+ ylab(label = "Schneemenge in cm")+
scale_x_date(date_breaks="months",date_labels="%Y-%m")+
theme_minimal()
# Einfacher Linienplot zum Regen in Seoul
ggplot(bike_data) +
geom_line(aes(x=Date,y=Snowfall),color="deepskyblue")+
labs(title="Täglich gemessener Schneefall über ein Jahr")+
xlab(label = "Datum")+ ylab(label = "Schneemenge in cm")+
scale_x_date(date_breaks="months",date_labels="%Y-%m")+
theme_minimal()
# Einfacher Linienplot zum Regen in Seoul
ggplot(bike_data) +
geom_line(aes(x=Date,y=Snowfall),color="deepskyblue")+
geom_line(aes(x=Date, y=Rainfall), color="navy")+
labs(title="Täglich gemessener Schneefall über ein Jahr")+
xlab(label = "Datum")+ ylab(label = " ")+
scale_x_date(date_breaks="months",date_labels="%Y-%m")+
theme_minimal()
# Einfacher Linienplot zum Regen in Seoul
ggplot(bike_data) +
geom_line(aes(x=Date,y=Snowfall),color="deepskyblue")+
geom_line(aes(x=Date, y=Rainfall), color="navy")+
labs(title="Täglich gemessener Schneefall und Regen über ein Jahr")+
xlab(label = "Datum")+ ylab(label = " ")+
scale_x_date(date_breaks="months",date_labels="%Y-%m")+
theme_minimal()
# A workaround is the following:
rslocator <- function(n=512, type="p", ...)
{
on.exit(return(list(x=x,y=y))) # output even when function is canceled with ESC in console
x <- y <- NULL
i <- 1
while(i<=n)
{
d <- locator(1)
if(is.null(d)) break # If user pressed ESC in Rstudio Graphics window
x <- c(x, d$x)
y <- c(y, d$y)
points(x,y, type=type, ...)
i <- i+1
}
}
plot(1:10, type="n")
rslocator(7, col="blue", type="o")
# plots each point right after clicking and ESC still works fine
#install.packages("tidyverse")
#install.packages("PerformanceAnalytics")
#install.packages("ggfortify")
#install.packages("fastDummies")
library(tidyverse) # core package includes following packages: tidyr, dplyr, ggplot2, readr, purrr, tibble, stringr, forcats
library(plotly)
library("PerformanceAnalytics") #for correlation
library(broom) # for model quantification
library(ggfortify) # for visualizing model fits
library(fastDummies)
library(dplyr)
library(ggplot2)
library(tidyverse)
library(dplyr)
library(tidyr)
library(ggplot2)
library(magrittr)
#install.packages("PerformanceAnalytics")
library("PerformanceAnalytics")
#install.packages("scales")
#library(scales)
bike_data <- read_csv("SeoulBikeData.csv",
show_col_types = FALSE,
col_types = cols(Date = col_date(format = "%d/%m/%Y"),
Seasons = col_factor(levels = c("Winter", "Spring", "Summer", "Autumn"),
ordered = TRUE),
Holiday = col_factor(),
"Functioning Day" = col_factor()
))
bike_data <- bike_data %>%
mutate(day = weekdays(Date),
month = months(Date),
day_time = case_when(
Hour >= 5 & Hour < 11 ~ "Morning",
Hour >= 11 & Hour < 15 ~ "Noon",
Hour >= 15 & Hour < 18 ~ "Afternoon",
Hour >= 18 & Hour < 22 ~ "Evening",
Hour < 5 | Hour >= 22 ~ "Night")) %>%
select(Date,month,day,Hour,day_time, Holiday, 'Rented Bike Count',everything())
bike_data$day_time <- factor(bike_data$day_time,
levels = c("Morning", "Noon", "Afternoon", "Evening", "Night"),ordered = TRUE)
bike_data$day <- factor(bike_data$day,
levels = c("Montag", "Dienstag", "Mittwoch", "Donnerstag", "Freitag", "Samstag", "Sonntag" ))
bike_data$month <- factor(bike_data$month,
levels = c("Januar", "Februar", "März", "April", "Mai", "Juni", "Juli", "August", "September", "Oktober","November", "Dezember"))
grafik_1 <- bike_data %>%
plot_ly(x = ~Seasons) %>%
add_histogram(color = I("darkgreen"), opacity = 0.9) %>%
layout(title = "Total bike count by seasons")
start <- Sys.time()
grafik_1
end <- Sys.time()
print(end - start)
grafik_2 <- ggplot(bike_data, aes(`Temperature` ,`Rented Bike Count`, color = `Seasons`))+
geom_jitter(alpha = 0.3)+
scale_fill_grey(start = 0.2, end = 0.8,na.value = "red")+
stat_smooth(method = lm, se = FALSE, color = "red")+
labs(
x = "Temperature in Celsius",
y = "Rented Bikes",
title = "Correlation between temperature and rented bikes")+
theme_minimal()
start <- Sys.time()
grafik_2
end <- Sys.time()
print(end - start)
grafik_3 <- bike_data %>%
plot_ly(x = ~Seasons) %>%
add_histogram(color = I("navy"), opacity = 0.9) %>%
layout(title = "Total bike count by seasons")
grafik_3
grafik_4 <- ggplot(bike_data, aes(`Temperature` ,`Rented Bike Count`, color = `Seasons`, colors = "Dark2"))+
geom_jitter(alpha = 0.3)+
scale_fill_grey(start = 0.2, end = 0.8,na.value = "red")+
stat_smooth(method = lm, se = FALSE, color = "black")+
labs(
x = "Temperature in Celsius",
y = "Rented Bikes",
title = "Correlation between temperature and rented bikes")+
theme_minimal()
ggplotly(grafik_4)
grafik_5 <- ggplot(bike_data,aes(x= Snowfall, y = `Rented Bike Count`))+
geom_jitter(shape=8, (aes(color = Temperature)))+
scale_color_gradient(low="dark blue", high= "light blue")+
facet_wrap(~month)+
xlab("Schnee in Zentimetern") +
ylab("Ausgeliehene Fahrräder")+
ggtitle("Anzahl ausgeliehene Fahrräder und der Einfluss von Schnee")+
theme_minimal()
grafik_5
ggplotly(grafik_5)
grafik_6 <- ggplot(bike_data, aes(Hour, `Rented Bike Count`))+
geom_point(aes(color = day), alpha = 0.5) +
geom_smooth(aes(color = day, fill = day), method = "lm")+
xlab("Uhrzeit") +
ylab("Anzahl ausgeliehener Fahrräder")+
theme_minimal()
grafik_6
ggplotly(grafik_6, dynamicTicks = TRUE) %>%
rangeslider() %>%
layout(hovermode = "x")
# Schritt 1: Übersichtliche Grafik machen mit Stunde und ausgeliehenen Fahrrädern nach Wochentag aufgeteilt.
library(RColorBrewer)
display.brewer.all(colorblindFriendly = TRUE)
grafik_8 <- bike_data %>%
ggplot(aes(Hour, `Rented Bike Count`, color = day)) +
geom_smooth(se = F, size = 2) +
xlab("Uhrzeit") +
ylab("Anzahl ausgeliehener Fahrräder")+
scale_color_discrete("")+
scale_color_brewer(palette = "Paired")+
theme_minimal()
grafik_8
#Schritt 2: Den Slider hinzufügen
ggplotly(grafik_8, dynamicTicks = TRUE) %>%
rangeslider() %>%
layout(hovermode = "x", title = "Der Trend von Fahrradausleihen zu verschiedenen Zeiten und an Wochentagen")
# Einfacher Linienplot zum Regen in Seoul
ggplot(bike_data) +
geom_line(aes(x=Date,y=Snowfall),color="deepskyblue")+
geom_line(aes(x=Date, y=Rainfall), color="navy")+
labs(title="Täglich gemessener Schneefall und Regen über ein Jahr")+
xlab(label = "Datum")+ ylab(label = " ")+
scale_x_date(date_breaks="months",date_labels="%Y-%m")+
theme_minimal()
# A workaround is the following:
rslocator <- function(n=512, type="p", ...)
{
on.exit(return(list(x=x,y=y))) # output even when function is canceled with ESC in console
x <- y <- NULL
i <- 1
while(i<=n)
{
d <- locator(1)
if(is.null(d)) break # If user pressed ESC in Rstudio Graphics window
x <- c(x, d$x)
y <- c(y, d$y)
points(x,y, type=type, ...)
i <- i+1
}
}
plot(1:10, type="n")
rslocator(7, col="blue", type="o")
# plots each point right after clicking and ESC still works fine
# Einfacher Linienplot zum Regen in Seoul
ggplot(bike_data) +
geom_line(aes(x=Date,y=Snowfall),color="deepskyblue")+
geom_line(aes(x=Date, y=Rainfall), color="navy")+
labs(title="Täglich gemessener Schneefall und Regen über ein Jahr")+
xlab(label = "Datum")+ ylab(label = " ")+
scale_x_date(date_breaks="months",date_labels="%Y-%m")+
theme_minimal()
rslocator <- function(n=512, type="p", ...)
{
on.exit(return(list(x=x,y=y))) # output even when function is canceled with ESC in console
x <- y <- NULL
i <- 1
while(i<=n)
{
d <- locator(1)
if(is.null(d)) break # If user pressed ESC in Rstudio Graphics window
x <- c(x, d$x)
y <- c(y, d$y)
points(x,y, type=type, ...)
i <- i+1
}
}
plot(1:10, type="n")
rslocator(7, col="blue", type="o")
# plots each point right after clicking and ESC still works fine
# Einfacher Linienplot zum Regen in Seoul
ggplot(bike_data) +
geom_line(aes(x=Date,y=Snowfall),color="deepskyblue")+
geom_line(aes(x=Date, y=Rainfall), color="navy")+
labs(title="Täglich gemessener Schneefall und Regen über ein Jahr")+
xlab(label = "Datum")+ ylab(label = " ")+
scale_x_date(date_breaks="months",date_labels="%Y-%m")+
theme_minimal()
rslocator <- function(n=512, type="p", ...)
{
on.exit(return(list(x=x,y=y))) # output even when function is canceled with ESC in console
x <- y <- NULL
i <- 1
while(i<=n)
{
d <- locator(1)
if(is.null(d)) break # If user pressed ESC in Rstudio Graphics window
x <- c(x, d$x)
y <- c(y, d$y)
points(x,y, type=type, ...)
i <- i+1
}
}
setwd("~/GitHub/Interactive Visualisations/Interactive-Visualisation")
